{"version":3,"sources":["components/TaskList/TaskList.tsx","components/Header/Header.tsx","components/TaskListHeader/TaskListHeader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskList","_useState","useState","description","completed","_useState2","Object","slicedToArray","tasks","setTasks","react_default","a","createElement","className","map","task","index","key","onClick","toConsumableArray","index_es","icon","faCheck","Header","TaskListHeader","props","title","App","Fragment","components_Header_Header","components_TaskListHeader_TaskListHeader","components_TaskList_TaskList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6945cdec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport './TaskList.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TaskList = () => {\r\n    const [tasks, setTasks] = useState<Task[]>([\r\n        {\r\n            description: 'This is a task',\r\n            completed: true\r\n        },\r\n        {\r\n            description: 'This is also a task',\r\n            completed: false\r\n        },\r\n        {\r\n            description: 'Check this task out!',\r\n            completed: false\r\n        }\r\n    ]);\r\n\r\n    return(\r\n        <div className=\"task__list\">\r\n            {tasks.map(\r\n                (task, index) => <div key={index} className=\"task\" onClick={() => { task.completed = !task.completed; setTasks([...tasks])} }>\r\n                            <div className=\"task__state\">\r\n                                <div className=\"checkbox\">\r\n                                    { task.completed ? <div className=\"animation__pin\" ><FontAwesomeIcon icon={faCheck} /></div> : '' }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task__description\">{task.description}</div>\r\n                        </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport class Task {\r\n    description: string = 'Example task description';\r\n    completed: boolean = false;\r\n}\r\n\r\nexport default TaskList;","import React from \"react\";\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className=\"header\">\r\n            Tidy\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './TaskListHeader.css';\r\n\r\nconst TaskListHeader = (props: {title:string}) => {\r\n    return(\r\n        <div className=\"list-header\">\r\n            {props.title}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskListHeader;","import React from 'react';\nimport './App.css';\n\nimport TaskList from './components/TaskList/TaskList';\nimport Header from './components/Header/Header';\nimport TaskListHeader from './components/TaskListHeader/TaskListHeader';\n\nconst App: React.FC = () => {\n  return (<>\n    <Header></Header>\n    <TaskListHeader title={\"Tasks this week\"}></TaskListHeader>\n    <TaskList></TaskList>\n    <TaskListHeader title={\"Upcoming tasks\"}></TaskListHeader>\n    <TaskList></TaskList>\n    <TaskList></TaskList>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}