{"version":3,"sources":["components/Header/Header.tsx","components/TaskListHeader/TaskListHeader.tsx","components/Task/TaskListItem.tsx","components/TaskList/TaskList.tsx","types/task.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","TaskListHeader","props","index_es","icon","faList","title","TaskListItem","_useState","useState","task","_useState2","Object","slicedToArray","setTask","onClick","toggleComplete","isCompleted","faCheck","name","description","Date","deadline","getDate","toLocaleString","month","TaskList","Fragment","components_TaskListHeader_TaskListHeader","tasks","map","index","components_Task_TaskListItem","key","Task","arguments","length","undefined","repeat","completed","created","classCallCheck","this","createClass","value","App","tasksThisWeek","upcomingTasks","components_Header_Header","components_TaskList_TaskList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b85d9c5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className=\"header\">\r\n            <span>Tidy</span>\r\n            <div className=\"spacer\"></div>\r\n            <button className=\"button\">+Add Task</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './TaskListHeader.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faList } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TaskListHeader = (props: {title:string}) => {\r\n    return(\r\n        <div className=\"list-header\">\r\n            <div className=\"icon\">\r\n                <FontAwesomeIcon icon={faList} />\r\n            </div>\r\n            <div className=\"title\">\r\n                {props.title}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskListHeader;","import React, { useState } from \"react\";\r\nimport './TaskListItem.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { Task } from \"../../types/task\";\r\n\r\nconst TaskListItem = (props: any) => {\r\n    const [task, setTask] = useState<Task>(props.task);\r\n\r\n    return(<div className=\"task\" onClick={() => {\r\n                    setTask(task.toggleComplete());\r\n                } }>\r\n                <div className=\"task__state\">\r\n                    <div className=\"checkbox\">\r\n                        { task.isCompleted() ? <div className=\"animation__check\" ><FontAwesomeIcon icon={faCheck} /></div> : '' }\r\n                    </div>\r\n                </div>\r\n                <div className=\"task__info\">\r\n                    <div className=\"task__name\">{task.name}</div>\r\n                    <div className=\"task__description\">{task.description}</div>                \r\n                </div>\r\n                <div className=\"task__time\">\r\n                    {new Date(task.deadline).getDate() + ' ' + new Date().toLocaleString('default', { month: 'long' })}\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default TaskListItem;","import React from \"react\";\r\nimport './TaskList.css';\r\n\r\nimport TaskListHeader from \"../TaskListHeader/TaskListHeader\";\r\nimport { Task } from \"../../types/task\";\r\nimport TaskListItem from \"../Task/TaskListItem\";\r\n\r\nconst TaskList = (props: {title:string ,tasks: Task[]}) => {\r\n    return(<>\r\n        <TaskListHeader title={props.title} />\r\n        <div className=\"task-list\">\r\n            {props.tasks.map((task: Task, index: number) => \r\n                <TaskListItem key={index} task={task} />\r\n            )}\r\n        </div>\r\n    </>);\r\n}\r\n\r\nexport default TaskList;","export class Task {\r\n    name: string;\r\n    description: string;  \r\n    completed: number;\r\n    created: number;\r\n    deadline: number;\r\n    repeat: number;\r\n\r\n    constructor(name: string = 'Example task name', \r\n                description: string = 'Example task description',\r\n                deadline: number = 0,\r\n                repeat: number = 0,\r\n                completed: number = 0,\r\n                created: number = +new Date()) {\r\n        this.name = name;\r\n        this.description = description;  \r\n        this.deadline = deadline;\r\n        this.repeat = repeat;\r\n        this.completed = completed;\r\n        this.created = created;\r\n    }\r\n\r\n    toggleComplete() {\r\n        return new Task(\r\n            this.name,\r\n            this.description,\r\n            this.deadline,\r\n            this.repeat,\r\n            this.isCompleted() ? 0 : +new Date(),\r\n            this.created\r\n        );\r\n    }\r\n\r\n    isCompleted() {\r\n        return this.completed !== 0;\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport TaskList from './components/TaskList/TaskList';\nimport { Task } from './types/task';\n\nconst App: React.FC = () => {\n  const tasksThisWeek = [\n    new Task('Slaapkamer opruimen','Kleding uitzoeken en weggooien', +new Date() + 1000)\n  ];\n\n  const upcomingTasks = [\n    new Task('Fiets repareren', 'Binnenband van achterwiel vervangen', +new Date() + 30000)\n  ];\n\n  return (<>\n    <Header></Header>\n    <TaskList tasks={tasksThisWeek} title={\"Tasks this week\"}></TaskList>\n    <TaskList tasks={upcomingTasks} title={\"Upcoming tasks\"}></TaskList>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}