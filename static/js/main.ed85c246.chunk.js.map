{"version":3,"sources":["components/Header/Header.tsx","components/TaskListHeader/TaskListHeader.tsx","components/Task/TaskListItem.tsx","components/TaskList/TaskList.tsx","types/task.ts","components/TaskDialog/TaskDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","react_default","a","createElement","className","onClick","onAddTask","TaskListHeader","index_es","icon","faList","title","getTimeDisplay","timestamp","Date","setHours","getDate","toLocaleString","month","TaskListItem","_useState","useState","task","_useState2","Object","slicedToArray","setTask","toggleComplete","isCompleted","faCheck","name","description","deadline","TaskList","Fragment","components_TaskListHeader_TaskListHeader","tasks","map","index","components_Task_TaskListItem","key","Task","arguments","length","undefined","repeat","completed","created","classCallCheck","this","createClass","value","TaskDialog","taskName","setTaskName","_useState3","toISOString","substr","_useState4","taskDeadline","setTaskDeadline","_useState5","_useState6","taskDescription","setTaskDescription","open","faPen","type","placeholder","onChange","event","target","faCalendarCheck","faClipboardList","onClose","onSubmit","App","taskDialogOpen","setTaskDialogOpen","setTasks","console","log","weekDay","getDay","startOfCurrentDay","beginOfWeek","endOfWeek","tasksThisWeek","filter","upcomingTasks","components_Header_Header","TaskDialog_TaskDialog_TaskDialog","concat","toConsumableArray","components_TaskList_TaskList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ed85c246.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Header.css';\r\n\r\nconst Header = (props: {onAddTask: () => void}) => {\r\n    return(\r\n        <div className=\"header\">\r\n            <span>Tidy</span>\r\n            <div className=\"spacer\"></div>\r\n            <button className=\"button\" onClick={props.onAddTask}>+Add Task</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport './TaskListHeader.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faList } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TaskListHeader = (props: {title:string}) => {\r\n    return(\r\n        <div className=\"list-header\">\r\n            <div className=\"icon\">\r\n                <FontAwesomeIcon icon={faList} />\r\n            </div>\r\n            <div className=\"title\">\r\n                {props.title}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskListHeader;","import React, { useState } from \"react\";\r\nimport './TaskListItem.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { Task } from \"../../types/task\";\r\n\r\nconst TaskListItem = (props: any) => {\r\n    const [task, setTask] = useState<Task>(props.task);\r\n\r\n    return(<div className=\"task\" onClick={() => {\r\n                    setTask(task.toggleComplete());\r\n                } }>\r\n                <div className=\"task__state\">\r\n                    <div className=\"checkbox\">\r\n                        { task.isCompleted() ? <div className=\"animation__check\" ><FontAwesomeIcon icon={faCheck} /></div> : '' }\r\n                    </div>\r\n                </div>\r\n                <div className=\"task__info\">\r\n                    <div className=\"task__name\">{task.name}</div>\r\n                    <div className=\"task__description\">{task.description}</div>                \r\n                </div>\r\n                <div className=\"task__time\">\r\n                    {getTimeDisplay(task.deadline)}\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nconst getTimeDisplay = (timestamp: number) => {\r\n    const taskDate = new Date(timestamp).setHours(0,0,0,0);\r\n    const today = new Date().setHours(0,0,0,0);\r\n\r\n\r\n\r\n    if(taskDate === today) {\r\n        return 'Today!'\r\n    }\r\n\r\n    return new Date(timestamp).getDate() + ' ' + new Date(timestamp).toLocaleString('default', { month: 'long' })\r\n}\r\n\r\nexport default TaskListItem;","import React from \"react\";\r\nimport './TaskList.css';\r\n\r\nimport TaskListHeader from \"../TaskListHeader/TaskListHeader\";\r\nimport { Task } from \"../../types/task\";\r\nimport TaskListItem from \"../Task/TaskListItem\";\r\n\r\nconst TaskList = (props: {title:string ,tasks: Task[]}) => {\r\n    return(<>\r\n        <TaskListHeader title={props.title} />\r\n        <div className=\"task-list\">\r\n            {props.tasks.map((task: Task, index: number) => \r\n                <TaskListItem key={index} task={task} />\r\n            )}\r\n        </div>\r\n    </>);\r\n}\r\n\r\nexport default TaskList;","export class Task {\r\n    name: string;\r\n    description: string;  \r\n    completed: number;\r\n    created: number;\r\n    deadline: number;\r\n    repeat: number;\r\n\r\n    constructor(name: string = 'Example task name', \r\n                description: string = 'Example task description',\r\n                deadline: number = 0,\r\n                repeat: number = 0,\r\n                completed: number = 0,\r\n                created: number = +new Date()) {\r\n        this.name = name;\r\n        this.description = description;  \r\n        this.deadline = deadline;\r\n        this.repeat = repeat;\r\n        this.completed = completed;\r\n        this.created = created;\r\n    }\r\n\r\n    toggleComplete() {\r\n        return new Task(\r\n            this.name,\r\n            this.description,\r\n            this.deadline,\r\n            this.repeat,\r\n            this.isCompleted() ? 0 : +new Date(),\r\n            this.created\r\n        );\r\n    }\r\n\r\n    isCompleted() {\r\n        return this.completed !== 0;\r\n    }\r\n}","import React, { useState, SyntheticEvent } from 'react';\r\nimport './TaskDialog.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPen, faCalendarCheck, faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport { Task } from '../../types/task';\r\n\r\nexport const TaskDialog = (props: any) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [taskDeadline, setTaskDeadline] = useState(new Date().toISOString().substr(0,10));\r\n    const [taskDescription, setTaskDescription] = useState('');\r\n\r\n    return (\r\n    <div className={'dialog-container' + (props.open ? ' open' : '')}>\r\n        <div className=\"task-dialog\">\r\n            <div className=\"dialog-header\">Create a new task</div>\r\n            <div className=\"dialog-content\">\r\n                <div className=\"input-container\">\r\n                    <div className=\"input-title\">\r\n                        <FontAwesomeIcon icon={faPen} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input type=\"text\" placeholder=\"Task name..\" value={taskName} onChange={event => {\r\n                            setTaskName((event.target as HTMLInputElement).value);\r\n                        }}></input>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <div className=\"input-title\">\r\n                        <FontAwesomeIcon icon={faCalendarCheck} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input type=\"date\" placeholder=\"Task deadlvine..\" value={taskDeadline} onChange={event => {\r\n                            setTaskDeadline((event.target as HTMLInputElement).value);\r\n                        }}></input>\r\n                    </div>\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <div className=\"input-title\">\r\n                        <FontAwesomeIcon icon={faClipboardList} />\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input type=\"text\" placeholder=\"Task description..\" value={taskDescription} onChange={event => {\r\n                            setTaskDescription((event.target as HTMLInputElement).value);\r\n                        }}></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialog-actions\">\r\n                <button onClick={() => props.onClose()}>Cancel</button>\r\n                <button onClick={() => props.onSubmit(new Task(taskName, taskDescription, +new Date(taskDeadline)))} className=\"button--type-success\">Accept</button>\r\n            </div>\r\n        </div>\r\n    </div>) \r\n}","import React, { useState } from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport TaskList from './components/TaskList/TaskList';\nimport { Task } from './types/task';\nimport { TaskDialog } from './components/TaskDialog/TaskDialog';\n\nconst App: React.FC = () => {\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n\n  const [tasks, setTasks] = useState([    \n    new Task('Slaapkamer opruimen','Kleding uitzoeken en weggooien', +new Date()),\n    new Task('Fiets repareren', 'Binnenband van achterwiel vervangen', +new Date() + (1000 * 60 * 60 * 24 * 2))\n  ]);\n\n  console.log('calculations!!!');\n\n  // Store length of a day (in ms), the current week day (monday = 0, sunday = 6) \n  // and the timestamp start for today\n  const dayLenght = 1000 * 60 * 60 * 24;\n  const weekDay = (+(new Date().getDay()) + 6) % 7;\n  const startOfCurrentDay = new Date().setHours(0,0,0,0);\n\n  // Calculate the timestamps for the start and end of the week\n  const beginOfWeek = startOfCurrentDay - (weekDay * dayLenght);\n  const endOfWeek = startOfCurrentDay + dayLenght;\n\n  // Filter tasks to only show tasks from this week\n  const tasksThisWeek = tasks.filter(task => task.deadline > beginOfWeek && task.deadline < endOfWeek);\n\n  // Show any other tasks with deadlines after the current week\n  const upcomingTasks = tasks.filter(task => task.deadline >= endOfWeek);\n\n  return (<>\n    <Header onAddTask={() => setTaskDialogOpen(true)}></Header>\n    <TaskDialog open={taskDialogOpen} onClose={() => setTaskDialogOpen(false)} onSubmit={(task: Task) => {\n        setTasks([...tasks, task]);\n        setTaskDialogOpen(false);\n      }}></TaskDialog>\n    \n    <TaskList tasks={tasksThisWeek} title={\"Tasks this week\"}></TaskList>\n    <TaskList tasks={upcomingTasks} title={\"Upcoming tasks\"}></TaskList>\n  </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}